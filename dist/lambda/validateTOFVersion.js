"use strict";
"using strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const compareVersions = require("compare-versions");
const sfn = new AWS.StepFunctions();
const cchLambdaLogger_js_1 = require("./cchLambdaLogger.js");
var cchLambdaLogger;
exports.handler = (event, context) => {
    cchLambdaLogger = new cchLambdaLogger_js_1.CCHLambdaLogger(process.env.STAGE_PREFIX, process.env.REGION, process.env.ACCOUNT, process.env.CCH_VERSION, context, process.env.KINESIS_ENABLED, event.input.customer.customerPrefix, event.input.customer.zone, '', '', event.input.custom.FCCH.FCCH_Execution, event.input.custom.FCCH.FCCH_Input['producer-id']);
    cchLambdaLogger.log("Inside validateTOFVersion lambda", event);
    const params = {
        resourceArn: event.arn
    };
    let actualVersion;
    const minimumVersion = ">=2.1.0";
    sfn.listTagsForResource(params, function (err, data) {
        cchLambdaLogger.log("Listing tags");
        if (err) {
            cchLambdaLogger.error(err);
            throw new Error(`task-orchestration version tag not found in ${event.arn}`);
        }
        else {
            data.tags.forEach(element => {
                if (element.key === 'task-orchestration-version') {
                    cchLambdaLogger.log(element.value);
                    actualVersion = element.value;
                    if (compareVersions.satisfies(actualVersion, minimumVersion)) {
                        cchLambdaLogger.log("version is ok");
                        return JSON.stringify(actualVersion);
                    }
                    else {
                        cchLambdaLogger.log(`TOF version should be ${minimumVersion}`);
                        const errorMessage = `TOF version should be ${minimumVersion}`;
                        cchLambdaLogger.error(errorMessage);
                        throw new Error(errorMessage);
                    }
                }
            });
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGVUT0ZWZXJzaW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGFtYmRhL3ZhbGlkYXRlVE9GVmVyc2lvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsY0FBYyxDQUFDOztBQUNmLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMvQixNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNwRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUNwQyw2REFBdUQ7QUFFdkQsSUFBSSxlQUFlLENBQUM7QUFDcEIsT0FBTyxDQUFDLE9BQU8sR0FBRyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRTtJQUVqQyxlQUFlLEdBQUcsSUFBSSxvQ0FBZSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUNuRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUNsRyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUVsSSxlQUFlLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRS9ELE1BQU0sTUFBTSxHQUFHO1FBQ1gsV0FBVyxFQUFFLEtBQUssQ0FBQyxHQUFHO0tBQ3pCLENBQUE7SUFDRCxJQUFJLGFBQWEsQ0FBQztJQUNsQixNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUM7SUFFakMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxVQUFTLEdBQUcsRUFBRSxJQUFJO1FBQzlDLGVBQWUsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDbkMsSUFBSSxHQUFHLEVBQUU7WUFDTCxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFBO1NBQzlFO2FBQ0k7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDeEIsSUFBSSxPQUFPLENBQUMsR0FBRyxLQUFLLDRCQUE0QixFQUFDO29CQUM3QyxlQUFlLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtvQkFDbEMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUE7b0JBRTdCLElBQUksZUFBZSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsY0FBYyxDQUFDLEVBQUM7d0JBQ3pELGVBQWUsQ0FBQyxHQUFHLENBQUUsZUFBZSxDQUFDLENBQUM7d0JBQ3RDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztxQkFDeEM7eUJBQ0k7d0JBQ0QsZUFBZSxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsY0FBYyxFQUFFLENBQUMsQ0FBQzt3QkFDL0QsTUFBTSxZQUFZLEdBQUcseUJBQXlCLGNBQWMsRUFBRSxDQUFBO3dCQUM5RCxlQUFlLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO3dCQUNwQyxNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFBO3FCQUNoQztpQkFDSjtZQUNMLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlwidXNpbmcgc3RyaWN0XCI7XG5jb25zdCBBV1MgPSByZXF1aXJlKFwiYXdzLXNka1wiKTtcbmNvbnN0IGNvbXBhcmVWZXJzaW9ucyA9IHJlcXVpcmUoXCJjb21wYXJlLXZlcnNpb25zXCIpO1xuY29uc3Qgc2ZuID0gbmV3IEFXUy5TdGVwRnVuY3Rpb25zKCk7XG5pbXBvcnQgeyBDQ0hMYW1iZGFMb2dnZXIgfSBmcm9tIFwiLi9jY2hMYW1iZGFMb2dnZXIuanNcIjtcblxudmFyIGNjaExhbWJkYUxvZ2dlcjtcbmV4cG9ydHMuaGFuZGxlciA9IChldmVudCwgY29udGV4dCkgPT4ge1xuXG4gICAgY2NoTGFtYmRhTG9nZ2VyID0gbmV3IENDSExhbWJkYUxvZ2dlcihwcm9jZXNzLmVudi5TVEFHRV9QUkVGSVgsIHByb2Nlc3MuZW52LlJFR0lPTiwgcHJvY2Vzcy5lbnYuQUNDT1VOVCwgXG4gICAgICAgIHByb2Nlc3MuZW52LkNDSF9WRVJTSU9OLCBjb250ZXh0LCBwcm9jZXNzLmVudi5LSU5FU0lTX0VOQUJMRUQsIGV2ZW50LmlucHV0LmN1c3RvbWVyLmN1c3RvbWVyUHJlZml4LCBcbiAgICAgICAgZXZlbnQuaW5wdXQuY3VzdG9tZXIuem9uZSwgJycsICcnLCBldmVudC5pbnB1dC5jdXN0b20uRkNDSC5GQ0NIX0V4ZWN1dGlvbiwgZXZlbnQuaW5wdXQuY3VzdG9tLkZDQ0guRkNDSF9JbnB1dFsncHJvZHVjZXItaWQnXSk7XG5cbiAgICBjY2hMYW1iZGFMb2dnZXIubG9nKFwiSW5zaWRlIHZhbGlkYXRlVE9GVmVyc2lvbiBsYW1iZGFcIiwgZXZlbnQpO1xuXG4gICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICByZXNvdXJjZUFybjogZXZlbnQuYXJuXG4gICAgfSBcbiAgICBsZXQgYWN0dWFsVmVyc2lvbjtcbiAgICBjb25zdCBtaW5pbXVtVmVyc2lvbiA9IFwiPj0yLjEuMFwiO1xuXG4gICAgc2ZuLmxpc3RUYWdzRm9yUmVzb3VyY2UocGFyYW1zLCBmdW5jdGlvbihlcnIsIGRhdGEpe1xuICAgICAgICBjY2hMYW1iZGFMb2dnZXIubG9nKFwiTGlzdGluZyB0YWdzXCIpXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNjaExhbWJkYUxvZ2dlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0YXNrLW9yY2hlc3RyYXRpb24gdmVyc2lvbiB0YWcgbm90IGZvdW5kIGluICR7ZXZlbnQuYXJufWApXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkYXRhLnRhZ3MuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5rZXkgPT09ICd0YXNrLW9yY2hlc3RyYXRpb24tdmVyc2lvbicpe1xuICAgICAgICAgICAgICAgICAgICBjY2hMYW1iZGFMb2dnZXIubG9nKGVsZW1lbnQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIGFjdHVhbFZlcnNpb24gPSBlbGVtZW50LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGFyZVZlcnNpb25zLnNhdGlzZmllcyhhY3R1YWxWZXJzaW9uLCBtaW5pbXVtVmVyc2lvbikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2NoTGFtYmRhTG9nZ2VyLmxvZyAoXCJ2ZXJzaW9uIGlzIG9rXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFjdHVhbFZlcnNpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2NoTGFtYmRhTG9nZ2VyLmxvZyhgVE9GIHZlcnNpb24gc2hvdWxkIGJlICR7bWluaW11bVZlcnNpb259YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgVE9GIHZlcnNpb24gc2hvdWxkIGJlICR7bWluaW11bVZlcnNpb259YFxuICAgICAgICAgICAgICAgICAgICAgICAgY2NoTGFtYmRhTG9nZ2VyLmVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KVxufVxuXG4iXX0=