"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const cchLambdaLogger_1 = require("./cchLambdaLogger");
const client_sns_1 = require("@aws-sdk/client-sns");
const CCHErrors_1 = require("./CCHErrors");
//get snsclient
const snsClient = new client_sns_1.SNSClient();
//Funtion checks if atleast one email id is subscribed for given customer
async function validate_email_topic(event) {
    cchLambdaLogger.log("validate email topic for: ", event);
    let check = false;
    const input = {
        TopicArn: process.env.SNS_TOPIC_ARN + "-" + event.input.customer.customerPrefix
    };
    const command = new client_sns_1.GetTopicAttributesCommand(input);
    const response = await snsClient.send(command);
    if (response.Attributes.SubscriptionsConfirmed < 1) {
        throw new CCHErrors_1.EmailValidationError("At least one email for manual approval should be subscribed for customer prefix " + event.input.customer.customerPrefix);
    }
    else {
        cchLambdaLogger.log("Subscriptions Confirmed: ", response.Attributes.SubscriptionsConfirmed);
    }
    check = true;
    return new Promise((resolve, reject) => {
        if (check === true) {
            resolve(true);
        }
        else {
            reject(false);
        }
    });
}
//Function checks if atleast one email id is registered for given customer
async function validate_emails(event) {
    cchLambdaLogger.log("Inside validate emails for: ", event);
    //validate emails
    if (!('emails' in event.config.customer.Item.config.M)) {
        throw new CCHErrors_1.EmailValidationError("Email required to send the validation errors was not found in customer-account-config for customer prefix " + event.input.customer.customerPrefix);
    }
    else {
        const emails = event.config.customer.Item.config.M.emails;
        if (!('L' in emails)) {
            throw new CCHErrors_1.EmailValidationError("Email for customer prefix " + event.input.customer.customerPrefix + " should be an array in customer-account-config");
        }
        else {
            const emailsArray = event.config.customer.Item.config.M.emails.L;
            if (emailsArray.length === 0) {
                throw new CCHErrors_1.EmailValidationError("At least one email should be specified for customer prefix " + event.input.customer.customerPrefix + " in customer-account-config");
            }
        }
    }
    await validate_email_topic(event);
}
var cchLambdaLogger;
const handler = async (event, context) => {
    cchLambdaLogger = new cchLambdaLogger_1.CCHLambdaLogger(process.env.STAGE_PREFIX, process.env.REGION, process.env.ACCOUNT, process.env.CCH_VERSION, context, process.env.KINESIS_ENABLED, event.input.customer.customerPrefix, event.input.customer.zone, '', '', event.input.custom.FCCH.FCCH_Execution, event.input.custom.FCCH.FCCH_Input['producer-id']);
    cchLambdaLogger.log("validateEmails lambda started", event);
    try {
        await validate_emails(event);
    }
    catch (err) {
        cchLambdaLogger.error(err);
        throw err;
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGVFbWFpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9sYW1iZGEvdmFsaWRhdGVFbWFpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdURBQW9EO0FBQ3BELG9EQUEyRTtBQUMzRSwyQ0FBbUQ7QUFFbkQsZUFBZTtBQUNmLE1BQU0sU0FBUyxHQUFHLElBQUksc0JBQVMsRUFBRSxDQUFDO0FBRWxDLHlFQUF5RTtBQUN6RSxLQUFLLFVBQVUsb0JBQW9CLENBQUMsS0FBSztJQUNyQyxlQUFlLENBQUMsR0FBRyxDQUFDLDRCQUE0QixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3pELElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNsQixNQUFNLEtBQUssR0FBRztRQUNWLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYztLQUNsRixDQUFBO0lBQ0QsTUFBTSxPQUFPLEdBQUcsSUFBSSxzQ0FBeUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyRCxNQUFNLFFBQVEsR0FBRyxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0MsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLHNCQUFzQixHQUFHLENBQUMsRUFBRTtRQUNoRCxNQUFNLElBQUksZ0NBQW9CLENBQUMsa0ZBQWtGLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDNUo7U0FBTTtRQUNILGVBQWUsQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsUUFBUSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0tBQ2hHO0lBQ0QsS0FBSyxHQUFHLElBQUksQ0FBQztJQUViLE9BQU8sSUFBSSxPQUFPLENBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDcEMsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFDO1lBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUNaO2FBQ0k7WUFDTCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDWjtJQUNMLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQUVELDBFQUEwRTtBQUMxRSxLQUFLLFVBQVUsZUFBZSxDQUFDLEtBQUs7SUFFaEMsZUFBZSxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUUzRCxpQkFBaUI7SUFDakIsSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDcEQsTUFBTSxJQUFJLGdDQUFvQixDQUFDLDRHQUE0RyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQ3RMO1NBQ0c7UUFDSSxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUE7UUFDekQsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxnQ0FBb0IsQ0FBQyw0QkFBNEIsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEdBQUcsZ0RBQWdELENBQUMsQ0FBQztTQUN6SjthQUNJO1lBQ0QsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtZQUNoRSxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUM5QixNQUFNLElBQUksZ0NBQW9CLENBQUMsNkRBQTZELEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYyxHQUFHLDZCQUE2QixDQUFDLENBQUM7YUFDbks7U0FDSjtLQUNSO0lBRUQsTUFBTSxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBRUQsSUFBSSxlQUFlLENBQUM7QUFDYixNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUcsS0FBSyxFQUFDLE9BQU8sRUFBRyxFQUFFO0lBRTdDLGVBQWUsR0FBRyxJQUFJLGlDQUFlLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQ25HLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQ2xHLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBRWxJLGVBQWUsQ0FBQyxHQUFHLENBQUMsK0JBQStCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFNUQsSUFBRztRQUVDLE1BQU0sZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ2hDO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDVixlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLE1BQU0sR0FBRyxDQUFDO0tBQ2I7QUFDTCxDQUFDLENBQUE7QUFmWSxRQUFBLE9BQU8sV0FlbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDQ0hMYW1iZGFMb2dnZXIgfSBmcm9tIFwiLi9jY2hMYW1iZGFMb2dnZXJcIjtcbmltcG9ydCB7IFNOU0NsaWVudCwgR2V0VG9waWNBdHRyaWJ1dGVzQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9jbGllbnQtc25zXCI7XG5pbXBvcnQgeyBFbWFpbFZhbGlkYXRpb25FcnJvciB9IGZyb20gXCIuL0NDSEVycm9yc1wiO1xuXG4vL2dldCBzbnNjbGllbnRcbmNvbnN0IHNuc0NsaWVudCA9IG5ldyBTTlNDbGllbnQoKTtcblxuLy9GdW50aW9uIGNoZWNrcyBpZiBhdGxlYXN0IG9uZSBlbWFpbCBpZCBpcyBzdWJzY3JpYmVkIGZvciBnaXZlbiBjdXN0b21lclxuYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVfZW1haWxfdG9waWMoZXZlbnQpIHtcbiAgICBjY2hMYW1iZGFMb2dnZXIubG9nKFwidmFsaWRhdGUgZW1haWwgdG9waWMgZm9yOiBcIiwgZXZlbnQpO1xuICAgIGxldCBjaGVjayA9IGZhbHNlO1xuICAgIGNvbnN0IGlucHV0ID0ge1xuICAgICAgICBUb3BpY0FybjogcHJvY2Vzcy5lbnYuU05TX1RPUElDX0FSTiArIFwiLVwiICsgZXZlbnQuaW5wdXQuY3VzdG9tZXIuY3VzdG9tZXJQcmVmaXhcbiAgICB9XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBHZXRUb3BpY0F0dHJpYnV0ZXNDb21tYW5kKGlucHV0KTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHNuc0NsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgIGlmIChyZXNwb25zZS5BdHRyaWJ1dGVzLlN1YnNjcmlwdGlvbnNDb25maXJtZWQgPCAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFbWFpbFZhbGlkYXRpb25FcnJvcihcIkF0IGxlYXN0IG9uZSBlbWFpbCBmb3IgbWFudWFsIGFwcHJvdmFsIHNob3VsZCBiZSBzdWJzY3JpYmVkIGZvciBjdXN0b21lciBwcmVmaXggXCIgKyBldmVudC5pbnB1dC5jdXN0b21lci5jdXN0b21lclByZWZpeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY2NoTGFtYmRhTG9nZ2VyLmxvZyhcIlN1YnNjcmlwdGlvbnMgQ29uZmlybWVkOiBcIiwgcmVzcG9uc2UuQXR0cmlidXRlcy5TdWJzY3JpcHRpb25zQ29uZmlybWVkKTtcbiAgICB9XG4gICAgY2hlY2sgPSB0cnVlO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlICgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGlmIChjaGVjayA9PT0gdHJ1ZSl7XG4gICAgICAgIHJlc29sdmUodHJ1ZSlcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgcmVqZWN0KGZhbHNlKVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuLy9GdW5jdGlvbiBjaGVja3MgaWYgYXRsZWFzdCBvbmUgZW1haWwgaWQgaXMgcmVnaXN0ZXJlZCBmb3IgZ2l2ZW4gY3VzdG9tZXJcbmFzeW5jIGZ1bmN0aW9uIHZhbGlkYXRlX2VtYWlscyhldmVudCl7XG4gICAgXG4gICAgY2NoTGFtYmRhTG9nZ2VyLmxvZyhcIkluc2lkZSB2YWxpZGF0ZSBlbWFpbHMgZm9yOiBcIiwgZXZlbnQpO1xuXG4gICAgLy92YWxpZGF0ZSBlbWFpbHNcbiAgICBpZiAoISgnZW1haWxzJyBpbiBldmVudC5jb25maWcuY3VzdG9tZXIuSXRlbS5jb25maWcuTSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVtYWlsVmFsaWRhdGlvbkVycm9yKFwiRW1haWwgcmVxdWlyZWQgdG8gc2VuZCB0aGUgdmFsaWRhdGlvbiBlcnJvcnMgd2FzIG5vdCBmb3VuZCBpbiBjdXN0b21lci1hY2NvdW50LWNvbmZpZyBmb3IgY3VzdG9tZXIgcHJlZml4IFwiICsgZXZlbnQuaW5wdXQuY3VzdG9tZXIuY3VzdG9tZXJQcmVmaXgpO1xuICAgIH1cbiAgICBlbHNle1xuICAgICAgICAgICAgY29uc3QgZW1haWxzID0gZXZlbnQuY29uZmlnLmN1c3RvbWVyLkl0ZW0uY29uZmlnLk0uZW1haWxzXG4gICAgICAgICAgICBpZiAoISgnTCcgaW4gZW1haWxzKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFbWFpbFZhbGlkYXRpb25FcnJvcihcIkVtYWlsIGZvciBjdXN0b21lciBwcmVmaXggXCIgKyBldmVudC5pbnB1dC5jdXN0b21lci5jdXN0b21lclByZWZpeCArIFwiIHNob3VsZCBiZSBhbiBhcnJheSBpbiBjdXN0b21lci1hY2NvdW50LWNvbmZpZ1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVtYWlsc0FycmF5ID0gZXZlbnQuY29uZmlnLmN1c3RvbWVyLkl0ZW0uY29uZmlnLk0uZW1haWxzLkxcbiAgICAgICAgICAgICAgICBpZiAoZW1haWxzQXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVtYWlsVmFsaWRhdGlvbkVycm9yKFwiQXQgbGVhc3Qgb25lIGVtYWlsIHNob3VsZCBiZSBzcGVjaWZpZWQgZm9yIGN1c3RvbWVyIHByZWZpeCBcIiArIGV2ZW50LmlucHV0LmN1c3RvbWVyLmN1c3RvbWVyUHJlZml4ICsgXCIgaW4gY3VzdG9tZXItYWNjb3VudC1jb25maWdcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgIH1cblxuICAgIGF3YWl0IHZhbGlkYXRlX2VtYWlsX3RvcGljKGV2ZW50KTsgICAgXG59XG4gXG52YXIgY2NoTGFtYmRhTG9nZ2VyOyAgICBcbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKCBldmVudCxjb250ZXh0ICkgPT4ge1xuXG4gICAgY2NoTGFtYmRhTG9nZ2VyID0gbmV3IENDSExhbWJkYUxvZ2dlcihwcm9jZXNzLmVudi5TVEFHRV9QUkVGSVgsIHByb2Nlc3MuZW52LlJFR0lPTiwgcHJvY2Vzcy5lbnYuQUNDT1VOVCwgXG4gICAgICAgIHByb2Nlc3MuZW52LkNDSF9WRVJTSU9OLCBjb250ZXh0LCBwcm9jZXNzLmVudi5LSU5FU0lTX0VOQUJMRUQsIGV2ZW50LmlucHV0LmN1c3RvbWVyLmN1c3RvbWVyUHJlZml4LCBcbiAgICAgICAgZXZlbnQuaW5wdXQuY3VzdG9tZXIuem9uZSwgJycsICcnLCBldmVudC5pbnB1dC5jdXN0b20uRkNDSC5GQ0NIX0V4ZWN1dGlvbiwgZXZlbnQuaW5wdXQuY3VzdG9tLkZDQ0guRkNDSF9JbnB1dFsncHJvZHVjZXItaWQnXSk7XG5cbiAgICBjY2hMYW1iZGFMb2dnZXIubG9nKFwidmFsaWRhdGVFbWFpbHMgbGFtYmRhIHN0YXJ0ZWRcIiwgZXZlbnQpO1xuXG4gICAgdHJ5eyAgICAgICBcbiAgICAgICBcbiAgICAgICAgYXdhaXQgdmFsaWRhdGVfZW1haWxzKGV2ZW50KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY2NoTGFtYmRhTG9nZ2VyLmVycm9yKGVycik7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9XG59Il19