"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cchLambdaLogger_js_1 = require("./cchLambdaLogger.js");
var cchLambdaLogger;
exports.handler = function iteratateTasks(event, context, callback) {
    cchLambdaLogger = new cchLambdaLogger_js_1.CCHLambdaLogger(process.env.STAGE_PREFIX, process.env.REGION, process.env.ACCOUNT, process.env.CCH_VERSION, context, process.env.KINESIS_ENABLED, event.input.customer.customerPrefix, event.input.customer.zone, '', '', event.input.custom.FCCH.FCCH_Execution, event.input.custom.FCCH.FCCH_Input['producer-id']);
    cchLambdaLogger.log("Inside iterateTasks lambda", event);
    let _index = event.index;
    const _step = event.step;
    const _count = event.count;
    const _stages = event.data.stages[_index];
    let _message = "";
    if (_index < _count) {
        _index = _index + _step;
        _message = `Stage ${_index} of ${_count}. Stage: ${_stages.stage}`;
    }
    else {
        _index = _index + _step;
        _message = "All stages complete";
        cchLambdaLogger.log("All stages complete");
    }
    callback(null, {
        current_stage: _message,
        count: _count,
        index: _index,
        step: _step,
        stages: _stages,
        continue: _index <= _count,
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlcmF0ZVRhc2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGFtYmRhL2l0ZXJhdGVUYXNrcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZEQUF1RDtBQUV2RCxJQUFJLGVBQWUsQ0FBQztBQUNwQixPQUFPLENBQUMsT0FBTyxHQUFHLFNBQVMsY0FBYyxDQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUTtJQUVqRSxlQUFlLEdBQUcsSUFBSSxvQ0FBZSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUNyRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUNsRyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUU5SCxlQUFlLENBQUMsR0FBRyxDQUFDLDRCQUE0QixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXpELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDekIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztJQUN6QixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0lBQzNCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNsQixJQUFJLE1BQU0sR0FBRyxNQUFNLEVBQUM7UUFDbEIsTUFBTSxHQUFHLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDeEIsUUFBUSxHQUFHLFNBQVMsTUFBTSxPQUFPLE1BQU0sWUFBWSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUE7S0FDbkU7U0FDSTtRQUNILE1BQU0sR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQTtRQUNoQyxlQUFlLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7S0FDNUM7SUFFRCxRQUFRLENBQUMsSUFBSSxFQUFFO1FBQ2IsYUFBYSxFQUFFLFFBQVE7UUFDdkIsS0FBSyxFQUFFLE1BQU07UUFDYixLQUFLLEVBQUUsTUFBTTtRQUNiLElBQUksRUFBRSxLQUFLO1FBQ1gsTUFBTSxFQUFFLE9BQU87UUFDZixRQUFRLEVBQUUsTUFBTSxJQUFJLE1BQU07S0FDM0IsQ0FBQyxDQUFBO0FBQ0osQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ0NITGFtYmRhTG9nZ2VyIH0gZnJvbSBcIi4vY2NoTGFtYmRhTG9nZ2VyLmpzXCI7XG5cbnZhciBjY2hMYW1iZGFMb2dnZXI7XG5leHBvcnRzLmhhbmRsZXIgPSBmdW5jdGlvbiBpdGVyYXRhdGVUYXNrcyAoZXZlbnQsIGNvbnRleHQsIGNhbGxiYWNrKSB7XG5cbiAgY2NoTGFtYmRhTG9nZ2VyID0gbmV3IENDSExhbWJkYUxvZ2dlcihwcm9jZXNzLmVudi5TVEFHRV9QUkVGSVgsIHByb2Nlc3MuZW52LlJFR0lPTiwgcHJvY2Vzcy5lbnYuQUNDT1VOVCwgXG4gICAgcHJvY2Vzcy5lbnYuQ0NIX1ZFUlNJT04sIGNvbnRleHQsIHByb2Nlc3MuZW52LktJTkVTSVNfRU5BQkxFRCwgZXZlbnQuaW5wdXQuY3VzdG9tZXIuY3VzdG9tZXJQcmVmaXgsIFxuICAgIGV2ZW50LmlucHV0LmN1c3RvbWVyLnpvbmUsICcnLCAnJywgZXZlbnQuaW5wdXQuY3VzdG9tLkZDQ0guRkNDSF9FeGVjdXRpb24sIGV2ZW50LmlucHV0LmN1c3RvbS5GQ0NILkZDQ0hfSW5wdXRbJ3Byb2R1Y2VyLWlkJ10pO1xuXG4gICAgY2NoTGFtYmRhTG9nZ2VyLmxvZyhcIkluc2lkZSBpdGVyYXRlVGFza3MgbGFtYmRhXCIsIGV2ZW50KTtcblxuICAgIGxldCBfaW5kZXggPSBldmVudC5pbmRleDtcbiAgICBjb25zdCBfc3RlcCA9IGV2ZW50LnN0ZXA7XG4gICAgY29uc3QgX2NvdW50ID0gZXZlbnQuY291bnQ7XG4gICAgY29uc3QgX3N0YWdlcyA9IGV2ZW50LmRhdGEuc3RhZ2VzW19pbmRleF07XG4gICAgbGV0IF9tZXNzYWdlID0gXCJcIjtcbiAgICBpZiAoX2luZGV4IDwgX2NvdW50KXtcbiAgICAgIF9pbmRleCA9IF9pbmRleCArIF9zdGVwO1xuICAgICAgX21lc3NhZ2UgPSBgU3RhZ2UgJHtfaW5kZXh9IG9mICR7X2NvdW50fS4gU3RhZ2U6ICR7X3N0YWdlcy5zdGFnZX1gXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgX2luZGV4ID0gX2luZGV4ICsgX3N0ZXA7XG4gICAgICBfbWVzc2FnZSA9IFwiQWxsIHN0YWdlcyBjb21wbGV0ZVwiXG4gICAgICBjY2hMYW1iZGFMb2dnZXIubG9nKFwiQWxsIHN0YWdlcyBjb21wbGV0ZVwiKTtcbiAgICB9XG4gICAgXG4gICAgY2FsbGJhY2sobnVsbCwge1xuICAgICAgY3VycmVudF9zdGFnZTogX21lc3NhZ2UsXG4gICAgICBjb3VudDogX2NvdW50LFxuICAgICAgaW5kZXg6IF9pbmRleCxcbiAgICAgIHN0ZXA6IF9zdGVwLFxuICAgICAgc3RhZ2VzOiBfc3RhZ2VzLFxuICAgICAgY29udGludWU6IF9pbmRleCA8PSBfY291bnQsXG4gICAgfSlcbiAgfSJdfQ==