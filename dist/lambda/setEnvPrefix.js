"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This class will set envPrefix to each task present in template.
 * This will also replace the '${envPrefix}' which set from ReadS3
 * lambda function for both task execution name and noOP execution name.
 */
const cchLambdaLogger_js_1 = require("./cchLambdaLogger.js");
var cchLambdaLogger;
exports.handler = async (event, context) => {
    var _a;
    cchLambdaLogger = new cchLambdaLogger_js_1.CCHLambdaLogger(process.env.STAGE_PREFIX, process.env.REGION, process.env.ACCOUNT, process.env.CCH_VERSION, context, process.env.KINESIS_ENABLED, event.input.customer.customerPrefix, event.input.customer.zone, '', '', event.input.custom.FCCH.FCCH_Execution, event.input.custom.FCCH.FCCH_Input['producer-id']);
    cchLambdaLogger.log("Inside iterateTasks lambda", event);
    let stages = event.data.stages; // Stores stages in template.
    let environment = event.environment; // Stores environment.
    let NoOpExecutionName = (_a = event.data) === null || _a === void 0 ? void 0 : _a.NoOpExecutionName; // Stores noOp execution name if present.
    for (let i = 0; i < stages.length; i++) {
        let tasks = stages[i].tasks;
        for (let j = 0; j < tasks.length; j++) {
            let task = tasks[j];
            let executionName = task.params.executionName;
            task.params["envPrefix"] = environment;
            task.params["usePackaged"] = true; // Set to 'true' to ignore package customer task in TOF. 
            task.params.executionName = executionName.replace("${envPrefix}", environment);
            if (NoOpExecutionName) {
                event.data.NoOpExecutionName = event.data.NoOpExecutionName.replace("${envPrefix}", environment);
            }
        }
    }
    cchLambdaLogger.log("event.data", event.data);
    return event.data;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0RW52UHJlZml4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGFtYmRhL3NldEVudlByZWZpeC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0dBSUc7QUFDSCw2REFBdUQ7QUFFdkQsSUFBSSxlQUFlLENBQUM7QUFDcEIsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFOztJQUV6QyxlQUFlLEdBQUcsSUFBSSxvQ0FBZSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUNyRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUNsRyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUU5SCxlQUFlLENBQUMsR0FBRyxDQUFDLDRCQUE0QixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXpELElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsNkJBQTZCO0lBQzdELElBQUksV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxzQkFBc0I7SUFDM0QsSUFBSSxpQkFBaUIsR0FBRyxNQUFBLEtBQUssQ0FBQyxJQUFJLDBDQUFFLGlCQUFpQixDQUFDLENBQUMseUNBQXlDO0lBRTlGLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDNUIsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbEMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1lBQzlDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsV0FBVyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMseURBQXlEO1lBQzVGLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQy9FLElBQUcsaUJBQWlCLEVBQUU7Z0JBQ3BCLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLFdBQVcsQ0FBQyxDQUFDO2FBQ2xHO1NBQ0Y7S0FDSjtJQUNILGVBQWUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFFcEIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFRoaXMgY2xhc3Mgd2lsbCBzZXQgZW52UHJlZml4IHRvIGVhY2ggdGFzayBwcmVzZW50IGluIHRlbXBsYXRlLlxyXG4gKiBUaGlzIHdpbGwgYWxzbyByZXBsYWNlIHRoZSAnJHtlbnZQcmVmaXh9JyB3aGljaCBzZXQgZnJvbSBSZWFkUzNcclxuICogbGFtYmRhIGZ1bmN0aW9uIGZvciBib3RoIHRhc2sgZXhlY3V0aW9uIG5hbWUgYW5kIG5vT1AgZXhlY3V0aW9uIG5hbWUuXHJcbiAqL1xyXG5pbXBvcnQgeyBDQ0hMYW1iZGFMb2dnZXIgfSBmcm9tIFwiLi9jY2hMYW1iZGFMb2dnZXIuanNcIjtcclxuXHJcbnZhciBjY2hMYW1iZGFMb2dnZXI7XHJcbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudCwgY29udGV4dCkgPT4ge1xyXG5cclxuICBjY2hMYW1iZGFMb2dnZXIgPSBuZXcgQ0NITGFtYmRhTG9nZ2VyKHByb2Nlc3MuZW52LlNUQUdFX1BSRUZJWCwgcHJvY2Vzcy5lbnYuUkVHSU9OLCBwcm9jZXNzLmVudi5BQ0NPVU5ULCBcclxuICAgIHByb2Nlc3MuZW52LkNDSF9WRVJTSU9OLCBjb250ZXh0LCBwcm9jZXNzLmVudi5LSU5FU0lTX0VOQUJMRUQsIGV2ZW50LmlucHV0LmN1c3RvbWVyLmN1c3RvbWVyUHJlZml4LCBcclxuICAgIGV2ZW50LmlucHV0LmN1c3RvbWVyLnpvbmUsICcnLCAnJywgZXZlbnQuaW5wdXQuY3VzdG9tLkZDQ0guRkNDSF9FeGVjdXRpb24sIGV2ZW50LmlucHV0LmN1c3RvbS5GQ0NILkZDQ0hfSW5wdXRbJ3Byb2R1Y2VyLWlkJ10pO1xyXG5cclxuICAgIGNjaExhbWJkYUxvZ2dlci5sb2coXCJJbnNpZGUgaXRlcmF0ZVRhc2tzIGxhbWJkYVwiLCBldmVudCk7XHJcblxyXG4gICAgbGV0IHN0YWdlcyA9IGV2ZW50LmRhdGEuc3RhZ2VzOyAvLyBTdG9yZXMgc3RhZ2VzIGluIHRlbXBsYXRlLlxyXG4gICAgbGV0IGVudmlyb25tZW50ID0gZXZlbnQuZW52aXJvbm1lbnQ7IC8vIFN0b3JlcyBlbnZpcm9ubWVudC5cclxuICAgIGxldCBOb09wRXhlY3V0aW9uTmFtZSA9IGV2ZW50LmRhdGE/Lk5vT3BFeGVjdXRpb25OYW1lOyAvLyBTdG9yZXMgbm9PcCBleGVjdXRpb24gbmFtZSBpZiBwcmVzZW50LlxyXG5cclxuICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHN0YWdlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCB0YXNrcyA9IHN0YWdlc1tpXS50YXNrcztcclxuICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgdGFza3MubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgbGV0IHRhc2sgPSB0YXNrc1tqXTtcclxuICAgICAgICAgICAgbGV0IGV4ZWN1dGlvbk5hbWUgPSB0YXNrLnBhcmFtcy5leGVjdXRpb25OYW1lO1xyXG4gICAgICAgICAgICB0YXNrLnBhcmFtc1tcImVudlByZWZpeFwiXSA9IGVudmlyb25tZW50O1xyXG4gICAgICAgICAgICB0YXNrLnBhcmFtc1tcInVzZVBhY2thZ2VkXCJdID0gdHJ1ZTsgLy8gU2V0IHRvICd0cnVlJyB0byBpZ25vcmUgcGFja2FnZSBjdXN0b21lciB0YXNrIGluIFRPRi4gXHJcbiAgICAgICAgICAgIHRhc2sucGFyYW1zLmV4ZWN1dGlvbk5hbWUgPSBleGVjdXRpb25OYW1lLnJlcGxhY2UoXCIke2VudlByZWZpeH1cIiwgZW52aXJvbm1lbnQpO1xyXG4gICAgICAgICAgICBpZihOb09wRXhlY3V0aW9uTmFtZSkge1xyXG4gICAgICAgICAgICAgIGV2ZW50LmRhdGEuTm9PcEV4ZWN1dGlvbk5hbWUgPSBldmVudC5kYXRhLk5vT3BFeGVjdXRpb25OYW1lLnJlcGxhY2UoXCIke2VudlByZWZpeH1cIiwgZW52aXJvbm1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIGNjaExhbWJkYUxvZ2dlci5sb2coXCJldmVudC5kYXRhXCIsIGV2ZW50LmRhdGEpO1xyXG4gICAgcmV0dXJuIGV2ZW50LmRhdGE7ICBcclxuXHJcbiAgfSJdfQ==