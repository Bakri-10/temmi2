"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const Ajv = require("ajv");
const s3 = new AWS.S3();
const ajv = new Ajv();
const cchLambdaLogger_js_1 = require("./cchLambdaLogger.js");
const CCHErrors_js_1 = require("./CCHErrors.js");
async function getS3file(bucket, folder, file) {
    let s3key;
    if (folder === null) {
        s3key = file;
    }
    else {
        s3key = folder + '/' + file;
    }
    const bucketParams = {
        Bucket: bucket,
        Key: s3key
    };
    const data = await s3.getObject(bucketParams).promise();
    const output = data.Body.toString();
    const jsonData = JSON.parse(output);
    return jsonData;
}
/*  checkDuplicateTasks
        Check for duplicate task names in the JSON template
        Arguments:
            the JSON template string
        Returns:
            list of duplicate task names or an empty array if there are no duplicates
*/
function checkDuplicateTasks(jsonData) {
    let taskList = [];
    let duplicateTasks = [];
    let stageLength = jsonData.stages.length;
    for (let i = 0; i < stageLength; i++) {
        let taskLength = jsonData.stages[i].tasks.length;
        for (let j = 0; j < taskLength; j++) {
            if (taskList.includes(jsonData.stages[i].tasks[j].taskname)) {
                let stageTask = "Stage: " + jsonData.stages[i].stage + " Task: " + jsonData.stages[i].tasks[j].taskname;
                duplicateTasks.push(stageTask);
            }
            else {
                taskList.push(jsonData.stages[i].tasks[j].taskname);
            }
        }
    }
    return duplicateTasks;
}
var cchLambdaLogger;
exports.handler = async (event, context) => {
    cchLambdaLogger = new cchLambdaLogger_js_1.CCHLambdaLogger(process.env.STAGE_PREFIX, process.env.REGION, process.env.ACCOUNT, process.env.CCH_VERSION, context, process.env.KINESIS_ENABLED, event.input.customer.customerPrefix, event.input.customer.zone, '', '', event.input.custom.FCCH.FCCH_Execution, event.input.custom.FCCH.FCCH_Input['producer-id']);
    cchLambdaLogger.log("Inside validateTemplate lambda", event);
    const jsonTemplate = await getS3file(event.template.bucket, event.template.folder, event.template.file);
    const jsonSchema = await getS3file(event.template.bucket, null, 'schema_template.json');
    const validate = ajv.compile(jsonSchema);
    const valid = validate(jsonTemplate);
    if (valid) {
        const duplicateTasks = checkDuplicateTasks(jsonTemplate);
        if (duplicateTasks.length > 0) {
            cchLambdaLogger.log("Duplicate Tasks in template", JSON.stringify(duplicateTasks));
        }
        return event.template;
    }
    else {
        const errorMessage = `${validate.errors[0].instancePath} - ${validate.errors[0].message} - ${JSON.stringify(validate.errors[0].params)}`;
        cchLambdaLogger.error(errorMessage);
        throw new CCHErrors_js_1.TemplateValidationError(errorMessage);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGVUZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xhbWJkYS92YWxpZGF0ZVRlbXBsYXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUMxQixNQUFNLEVBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUN4QixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ3RCLDZEQUF1RDtBQUN2RCxpREFBeUQ7QUFFekQsS0FBSyxVQUFVLFNBQVMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUk7SUFDekMsSUFBSSxLQUFLLENBQUM7SUFDVixJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7UUFDakIsS0FBSyxHQUFJLElBQUksQ0FBQTtLQUNoQjtTQUNJO1FBQ0QsS0FBSyxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFBO0tBQzlCO0lBQ0QsTUFBTSxZQUFZLEdBQUc7UUFDakIsTUFBTSxFQUFHLE1BQU07UUFDZixHQUFHLEVBQUUsS0FBSztLQUNiLENBQUM7SUFDRixNQUFNLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDeEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXBDLE9BQU8sUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUFFRDs7Ozs7O0VBTUU7QUFDRixTQUFTLG1CQUFtQixDQUFDLFFBQVE7SUFDakMsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLElB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QWMsQ0FBQyxDQUFDLENBQUE7U0FDckY7UUFDRCxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUM7S0FDekI7U0FDSTtRQUNELE1BQU0sWUFBWSxHQUFHLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLE1BQU0sUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDekksZUFBZSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwQyxNQUFNLElBQUksc0NBQXVCLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDbkQ7QUFDTCxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5jb25zdCBBanYgPSByZXF1aXJlKFwiYWp2XCIpXG5jb25zdCBzMyA9IG5ldyBBV1MuUzMoKTtcbmNvbnN0IGFqdiA9IG5ldyBBanYoKTtcbmltcG9ydCB7IENDSExhbWJkYUxvZ2dlciB9IGZyb20gXCIuL2NjaExhbWJkYUxvZ2dlci5qc1wiO1xuaW1wb3J0IHsgVGVtcGxhdGVWYWxpZGF0aW9uRXJyb3IgfSBmcm9tIFwiLi9DQ0hFcnJvcnMuanNcIjtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0UzNmaWxlKGJ1Y2tldCwgZm9sZGVyLCBmaWxlKSB7XG4gICAgbGV0IHMza2V5O1xuICAgIGlmIChmb2xkZXIgPT09IG51bGwpIHtcbiAgICAgICAgczNrZXkgPSAgZmlsZVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgczNrZXkgPSBmb2xkZXIgKyAnLycgKyBmaWxlXG4gICAgfVxuICAgIGNvbnN0IGJ1Y2tldFBhcmFtcyA9IHtcbiAgICAgICAgQnVja2V0IDogYnVja2V0LFxuICAgICAgICBLZXk6IHMza2V5XG4gICAgfTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgczMuZ2V0T2JqZWN0KGJ1Y2tldFBhcmFtcykucHJvbWlzZSgpOyBcbiAgICBjb25zdCBvdXRwdXQgPSBkYXRhLkJvZHkudG9TdHJpbmcoKTtcbiAgICBjb25zdCBqc29uRGF0YSA9IEpTT04ucGFyc2Uob3V0cHV0KTtcblxuICAgIHJldHVybiBqc29uRGF0YTtcbn1cblxuLyogIGNoZWNrRHVwbGljYXRlVGFza3NcbiAgICAgICAgQ2hlY2sgZm9yIGR1cGxpY2F0ZSB0YXNrIG5hbWVzIGluIHRoZSBKU09OIHRlbXBsYXRlXG4gICAgICAgIEFyZ3VtZW50czpcbiAgICAgICAgICAgIHRoZSBKU09OIHRlbXBsYXRlIHN0cmluZ1xuICAgICAgICBSZXR1cm5zOlxuICAgICAgICAgICAgbGlzdCBvZiBkdXBsaWNhdGUgdGFzayBuYW1lcyBvciBhbiBlbXB0eSBhcnJheSBpZiB0aGVyZSBhcmUgbm8gZHVwbGljYXRlc1xuKi9cbmZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlVGFza3MoanNvbkRhdGEpIHtcbiAgICBsZXQgdGFza0xpc3QgPSBbXTtcbiAgICBsZXQgZHVwbGljYXRlVGFza3MgPSBbXTtcbiAgICBsZXQgc3RhZ2VMZW5ndGggPSBqc29uRGF0YS5zdGFnZXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhZ2VMZW5ndGg7IGkrKyl7XG4gICAgICAgIGxldCB0YXNrTGVuZ3RoID0ganNvbkRhdGEuc3RhZ2VzW2ldLnRhc2tzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0YXNrTGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgaWYgKHRhc2tMaXN0LmluY2x1ZGVzKGpzb25EYXRhLnN0YWdlc1tpXS50YXNrc1tqXS50YXNrbmFtZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhZ2VUYXNrID0gXCJTdGFnZTogXCIgKyBqc29uRGF0YS5zdGFnZXNbaV0uc3RhZ2UgKyBcIiBUYXNrOiBcIiArIGpzb25EYXRhLnN0YWdlc1tpXS50YXNrc1tqXS50YXNrbmFtZTtcbiAgICAgICAgICAgICAgICBkdXBsaWNhdGVUYXNrcy5wdXNoKHN0YWdlVGFzayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhc2tMaXN0LnB1c2goanNvbkRhdGEuc3RhZ2VzW2ldLnRhc2tzW2pdLnRhc2tuYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZHVwbGljYXRlVGFza3M7XG59XG5cbnZhciBjY2hMYW1iZGFMb2dnZXI7XG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQsIGNvbnRleHQpID0+IHtcblxuICAgIGNjaExhbWJkYUxvZ2dlciA9IG5ldyBDQ0hMYW1iZGFMb2dnZXIocHJvY2Vzcy5lbnYuU1RBR0VfUFJFRklYLCBwcm9jZXNzLmVudi5SRUdJT04sIHByb2Nlc3MuZW52LkFDQ09VTlQsIFxuICAgICAgICBwcm9jZXNzLmVudi5DQ0hfVkVSU0lPTiwgY29udGV4dCwgcHJvY2Vzcy5lbnYuS0lORVNJU19FTkFCTEVELCBldmVudC5pbnB1dC5jdXN0b21lci5jdXN0b21lclByZWZpeCwgXG4gICAgICAgIGV2ZW50LmlucHV0LmN1c3RvbWVyLnpvbmUsICcnLCAnJywgZXZlbnQuaW5wdXQuY3VzdG9tLkZDQ0guRkNDSF9FeGVjdXRpb24sIGV2ZW50LmlucHV0LmN1c3RvbS5GQ0NILkZDQ0hfSW5wdXRbJ3Byb2R1Y2VyLWlkJ10pO1xuXG4gICAgY2NoTGFtYmRhTG9nZ2VyLmxvZyhcIkluc2lkZSB2YWxpZGF0ZVRlbXBsYXRlIGxhbWJkYVwiLCBldmVudCk7XG5cbiAgICBjb25zdCBqc29uVGVtcGxhdGUgPSBhd2FpdCBnZXRTM2ZpbGUoZXZlbnQudGVtcGxhdGUuYnVja2V0LCBldmVudC50ZW1wbGF0ZS5mb2xkZXIsIGV2ZW50LnRlbXBsYXRlLmZpbGUpO1xuICAgIGNvbnN0IGpzb25TY2hlbWEgPSBhd2FpdCBnZXRTM2ZpbGUoZXZlbnQudGVtcGxhdGUuYnVja2V0LCBudWxsLCAnc2NoZW1hX3RlbXBsYXRlLmpzb24nKTtcblxuICAgIGNvbnN0IHZhbGlkYXRlID0gYWp2LmNvbXBpbGUoanNvblNjaGVtYSk7XG4gICAgY29uc3QgdmFsaWQgPSB2YWxpZGF0ZShqc29uVGVtcGxhdGUpO1xuXG4gICAgaWYgKHZhbGlkKSB7XG4gICAgICAgIGNvbnN0IGR1cGxpY2F0ZVRhc2tzID0gY2hlY2tEdXBsaWNhdGVUYXNrcyhqc29uVGVtcGxhdGUpO1xuICAgICAgICBpZiAoZHVwbGljYXRlVGFza3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY2NoTGFtYmRhTG9nZ2VyLmxvZyhcIkR1cGxpY2F0ZSBUYXNrcyBpbiB0ZW1wbGF0ZVwiLCBKU09OLnN0cmluZ2lmeShkdXBsaWNhdGVUYXNrcykpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50LnRlbXBsYXRlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYCR7dmFsaWRhdGUuZXJyb3JzWzBdLmluc3RhbmNlUGF0aH0gLSAke3ZhbGlkYXRlLmVycm9yc1swXS5tZXNzYWdlfSAtICR7SlNPTi5zdHJpbmdpZnkodmFsaWRhdGUuZXJyb3JzWzBdLnBhcmFtcyl9YDtcbiAgICAgICAgY2NoTGFtYmRhTG9nZ2VyLmVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICAgIHRocm93IG5ldyBUZW1wbGF0ZVZhbGlkYXRpb25FcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgIH1cbn0iXX0=