"use strict";
"using strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** Lambda function to retrieve the error from the ExecutionFailed event in a failed execution */
const AWS = require("aws-sdk");
const sfn = new AWS.StepFunctions();
const cchLambdaLogger_js_1 = require("./cchLambdaLogger.js");
var cchLambdaLogger;
exports.handler = async (event, context) => {
    cchLambdaLogger = new cchLambdaLogger_js_1.CCHLambdaLogger(process.env.STAGE_PREFIX, process.env.REGION, process.env.ACCOUNT, process.env.CCH_VERSION, context, process.env.KINESIS_ENABLED, event.payload.params.customer.customerPrefix, event.payload.params.customer.zone, '', '', event.payload.params.custom.FCCH.FCCH_Execution, event.payload.params.custom.FCCH.FCCH_Input['producer-id']);
    cchLambdaLogger.log("Inside getExecutionFailed lambda", event);
    try {
        // Get execution from DescribeExecution output that StepFunctionStartExecution returns on error
        const errorCause = JSON.parse(event.payload.error.Cause);
        cchLambdaLogger.log("Error Cause from StartExecution: ", errorCause);
        const executionArn = errorCause.ExecutionArn;
        let executionEvent;
        // Execution history is eventually consistent, loop until get ExecutionFailed event (30 tries)
        for (let i = 1; i <= 30; i++) {
            let executions = await sfn.getExecutionHistory({
                executionArn: executionArn,
                maxResults: 1,
                reverseOrder: true
            }).promise();
            cchLambdaLogger.log("Execution history response:", executions);
            if (executions.events[0].type == "ExecutionFailed") {
                executionEvent = executions.events[0];
                break;
            }
            else {
                // Pause for 1 sec
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }
        // Extract error and cause, put into $.error - also keep execution details
        const errorDetails = executionEvent.executionFailedEventDetails;
        event.payload.error.Error = errorDetails.error;
        event.payload.error.Cause = errorDetails.cause;
        event.payload.error.ExecutionDetails = errorCause;
        return event.payload;
    }
    catch (err) {
        cchLambdaLogger.error(err);
        throw err;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0RXhlY3V0aW9uRmFpbGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGFtYmRhL2dldEV4ZWN1dGlvbkZhaWxlZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsY0FBYyxDQUFDOztBQUNmLGlHQUFpRztBQUNqRyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDcEMsNkRBQXVEO0FBRXZELElBQUksZUFBZSxDQUFDO0FBQ3BCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFHLEtBQUssRUFBRSxPQUFPLEVBQUcsRUFBRTtJQUN6QyxlQUFlLEdBQUcsSUFBSSxvQ0FBZSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUNuRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFDM0csS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFFN0osZUFBZSxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUUvRCxJQUFJO1FBQ0EsK0ZBQStGO1FBQy9GLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDeEQsZUFBZSxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNyRSxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFBO1FBRTVDLElBQUksY0FBYyxDQUFBO1FBQ2xCLDhGQUE4RjtRQUM5RixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFCLElBQUksVUFBVSxHQUFHLE1BQU0sR0FBRyxDQUFDLG1CQUFtQixDQUFDO2dCQUMzQyxZQUFZLEVBQUUsWUFBWTtnQkFDMUIsVUFBVSxFQUFFLENBQUM7Z0JBQ2IsWUFBWSxFQUFFLElBQUk7YUFDckIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2IsZUFBZSxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUUvRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLGlCQUFpQixFQUFFO2dCQUNoRCxjQUFjLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDckMsTUFBSzthQUNSO2lCQUFNO2dCQUNILGtCQUFrQjtnQkFDbEIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTthQUMxRDtTQUNKO1FBRUQsMEVBQTBFO1FBQzFFLE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQywyQkFBMkIsQ0FBQTtRQUMvRCxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQTtRQUM5QyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQTtRQUM5QyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUE7UUFFakQsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFBO0tBRXZCO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDVixlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLE1BQU0sR0FBRyxDQUFDO0tBQ2I7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzaW5nIHN0cmljdFwiO1xuLyoqIExhbWJkYSBmdW5jdGlvbiB0byByZXRyaWV2ZSB0aGUgZXJyb3IgZnJvbSB0aGUgRXhlY3V0aW9uRmFpbGVkIGV2ZW50IGluIGEgZmFpbGVkIGV4ZWN1dGlvbiAqL1xuY29uc3QgQVdTID0gcmVxdWlyZShcImF3cy1zZGtcIik7XG5jb25zdCBzZm4gPSBuZXcgQVdTLlN0ZXBGdW5jdGlvbnMoKTtcbmltcG9ydCB7IENDSExhbWJkYUxvZ2dlciB9IGZyb20gXCIuL2NjaExhbWJkYUxvZ2dlci5qc1wiO1xuXG52YXIgY2NoTGFtYmRhTG9nZ2VyO1xuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKCBldmVudCwgY29udGV4dCApID0+IHtcbiAgICBjY2hMYW1iZGFMb2dnZXIgPSBuZXcgQ0NITGFtYmRhTG9nZ2VyKHByb2Nlc3MuZW52LlNUQUdFX1BSRUZJWCwgcHJvY2Vzcy5lbnYuUkVHSU9OLCBwcm9jZXNzLmVudi5BQ0NPVU5ULCBcbiAgICAgICAgcHJvY2Vzcy5lbnYuQ0NIX1ZFUlNJT04sIGNvbnRleHQsIHByb2Nlc3MuZW52LktJTkVTSVNfRU5BQkxFRCwgZXZlbnQucGF5bG9hZC5wYXJhbXMuY3VzdG9tZXIuY3VzdG9tZXJQcmVmaXgsIFxuICAgICAgICBldmVudC5wYXlsb2FkLnBhcmFtcy5jdXN0b21lci56b25lLCAnJywgJycsIGV2ZW50LnBheWxvYWQucGFyYW1zLmN1c3RvbS5GQ0NILkZDQ0hfRXhlY3V0aW9uLCBldmVudC5wYXlsb2FkLnBhcmFtcy5jdXN0b20uRkNDSC5GQ0NIX0lucHV0Wydwcm9kdWNlci1pZCddKTtcblxuICAgIGNjaExhbWJkYUxvZ2dlci5sb2coXCJJbnNpZGUgZ2V0RXhlY3V0aW9uRmFpbGVkIGxhbWJkYVwiLCBldmVudCk7XG5cbiAgICB0cnkge1xuICAgICAgICAvLyBHZXQgZXhlY3V0aW9uIGZyb20gRGVzY3JpYmVFeGVjdXRpb24gb3V0cHV0IHRoYXQgU3RlcEZ1bmN0aW9uU3RhcnRFeGVjdXRpb24gcmV0dXJucyBvbiBlcnJvclxuICAgICAgICBjb25zdCBlcnJvckNhdXNlID0gSlNPTi5wYXJzZShldmVudC5wYXlsb2FkLmVycm9yLkNhdXNlKVxuICAgICAgICBjY2hMYW1iZGFMb2dnZXIubG9nKFwiRXJyb3IgQ2F1c2UgZnJvbSBTdGFydEV4ZWN1dGlvbjogXCIsIGVycm9yQ2F1c2UpO1xuICAgICAgICBjb25zdCBleGVjdXRpb25Bcm4gPSBlcnJvckNhdXNlLkV4ZWN1dGlvbkFyblxuXG4gICAgICAgIGxldCBleGVjdXRpb25FdmVudFxuICAgICAgICAvLyBFeGVjdXRpb24gaGlzdG9yeSBpcyBldmVudHVhbGx5IGNvbnNpc3RlbnQsIGxvb3AgdW50aWwgZ2V0IEV4ZWN1dGlvbkZhaWxlZCBldmVudCAoMzAgdHJpZXMpXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDMwOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBleGVjdXRpb25zID0gYXdhaXQgc2ZuLmdldEV4ZWN1dGlvbkhpc3Rvcnkoe1xuICAgICAgICAgICAgICAgIGV4ZWN1dGlvbkFybjogZXhlY3V0aW9uQXJuLFxuICAgICAgICAgICAgICAgIG1heFJlc3VsdHM6IDEsXG4gICAgICAgICAgICAgICAgcmV2ZXJzZU9yZGVyOiB0cnVlXG4gICAgICAgICAgICB9KS5wcm9taXNlKCk7XG4gICAgICAgICAgICBjY2hMYW1iZGFMb2dnZXIubG9nKFwiRXhlY3V0aW9uIGhpc3RvcnkgcmVzcG9uc2U6XCIsIGV4ZWN1dGlvbnMpO1xuXG4gICAgICAgICAgICBpZiAoZXhlY3V0aW9ucy5ldmVudHNbMF0udHlwZSA9PSBcIkV4ZWN1dGlvbkZhaWxlZFwiKSB7XG4gICAgICAgICAgICAgICAgZXhlY3V0aW9uRXZlbnQgPSBleGVjdXRpb25zLmV2ZW50c1swXVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFBhdXNlIGZvciAxIHNlY1xuICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEV4dHJhY3QgZXJyb3IgYW5kIGNhdXNlLCBwdXQgaW50byAkLmVycm9yIC0gYWxzbyBrZWVwIGV4ZWN1dGlvbiBkZXRhaWxzXG4gICAgICAgIGNvbnN0IGVycm9yRGV0YWlscyA9IGV4ZWN1dGlvbkV2ZW50LmV4ZWN1dGlvbkZhaWxlZEV2ZW50RGV0YWlsc1xuICAgICAgICBldmVudC5wYXlsb2FkLmVycm9yLkVycm9yID0gZXJyb3JEZXRhaWxzLmVycm9yXG4gICAgICAgIGV2ZW50LnBheWxvYWQuZXJyb3IuQ2F1c2UgPSBlcnJvckRldGFpbHMuY2F1c2VcbiAgICAgICAgZXZlbnQucGF5bG9hZC5lcnJvci5FeGVjdXRpb25EZXRhaWxzID0gZXJyb3JDYXVzZVxuXG4gICAgICAgIHJldHVybiBldmVudC5wYXlsb2FkXG5cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY2NoTGFtYmRhTG9nZ2VyLmVycm9yKGVycik7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9XG59OyJdfQ==