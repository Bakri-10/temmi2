"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CCHLogging = exports.CCHKinesisLogging = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const aws_kinesis_1 = require("aws-cdk-lib/aws-kinesis");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_lambda_nodejs_1 = require("aws-cdk-lib/aws-lambda-nodejs");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const aws_logs_destinations_1 = require("aws-cdk-lib/aws-logs-destinations");
const aws_stepfunctions_1 = require("aws-cdk-lib/aws-stepfunctions");
class CCHKinesisLogging {
    // Kinesis implementation of ILogging.  
    // When used the cch kinesis logging lambda is created.
    constructor(scope, name, endpoint, stage, region, account, role, filterRole, cchVersion) {
        this.scope = scope;
        this.cchKinesisLambda = new aws_lambda_nodejs_1.NodejsFunction(this.scope, `${stage}-cch-kinesis-lambda`, {
            runtime: aws_lambda_1.Runtime.NODEJS_20_X,
            entry: 'lambda/cchKinesisProcessor.js',
            handler: 'handler',
            description: 'Transforms log entries and publishes to Kinesis stream',
            functionName: `${stage}-cch-kinesis-lambda`,
            timeout: aws_cdk_lib_1.Duration.seconds(60),
            role,
            environment: {
                CCH_VERSION: cchVersion,
                REGION: region,
                STAGE: stage,
                ACCOUNT: account
            }
        });
        const importedStream = aws_kinesis_1.Stream.fromStreamArn(scope, name, endpoint);
        this.kinesisDestination = new aws_logs_destinations_1.KinesisDestination(importedStream, {
            role: filterRole
        });
        this.cchKinesisLambda.logGroup.addSubscriptionFilter(`${stage}-cch-kinesis-lambda-subscription-filter`, { destination: this.kinesisDestination,
            filterPattern: aws_logs_1.FilterPattern.literal('[timestamp=*Z, request_id="*-*", (level="INFO") || (level="ERROR"), message!="CCHLambdaLogger*"]') });
        this.sfnLoggingGroup = new aws_logs_1.LogGroup(this.scope, `${stage}-sfn-cch-log-group`, { logGroupName: `/aws/vendedlogs/${stage}-sfn-cch-log-group`, removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY });
        const grant = this.cchKinesisLambda.grantInvoke({
            grantPrincipal: new aws_iam_1.ServicePrincipal(`logs.${region}.amazonaws.com`)
        });
        this.sfnLoggingGroup.addSubscriptionFilter(`${stage}-sfn-cch-log-group-subscription-filter`, {
            destination: new aws_logs_destinations_1.LambdaDestination(this.cchKinesisLambda), filterPattern: aws_logs_1.FilterPattern.allEvents()
        }).node.addDependency(grant);
        console.log("Kinesis and lambda subscription filters enabled");
    }
    getLambdaSubscriptionFilter(lambdaName, logGroup) {
        logGroup.addSubscriptionFilter(`${lambdaName}-subscription-filter`, {
            destination: this.kinesisDestination,
            filterPattern: aws_logs_1.FilterPattern.literal('[timestamp=*Z, request_id="*-*", (level="INFO") || (level="ERROR"), message!="CCHLambdaLogger*"]')
        });
    }
    getStateMachineLogSettings(stpFunctionName) {
        return {
            trace: true,
            cloudwatch: {
                destination: this.sfnLoggingGroup,
                includeExecutionData: true,
                level: aws_stepfunctions_1.LogLevel.ALL
            }
        };
    }
    getLambdaLogSettings() {
        return aws_lambda_1.Tracing.ACTIVE;
    }
    isKinesisEnabled() {
        return "true";
    }
}
exports.CCHKinesisLogging = CCHKinesisLogging;
class CCHLogging {
    constructor(scope, name, endpoint, stage, region, account, role, filterRole, cchVersion) {
        this.scope = scope;
        this.filterRole = filterRole;
    }
    getLambdaSubscriptionFilter(lambdaName, logGroup) {
    }
    getLambdaLogSettings() {
        return aws_lambda_1.Tracing.ACTIVE;
    }
    // Log settings for all state machines, defaults to no subscription filters.
    getStateMachineLogSettings(stpFunctionName, isSubscriptionFilterRequired = false) {
        const loggingGroup = new aws_logs_1.LogGroup(this.scope, `${stpFunctionName}-log-group`, { logGroupName: `/aws/vendedlogs/${stpFunctionName}`, removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY });
        return {
            trace: true,
            cloudwatch: {
                destination: loggingGroup,
                includeExecutionData: true,
                level: aws_stepfunctions_1.LogLevel.ALL
            }
        };
    }
    isKinesisEnabled() {
        return "false";
    }
}
exports.CCHLogging = CCHLogging;
//# sourceMappingURL=data:application/json;base64,